#include <filesystem>
#include <iostream>
#include <opencv2/opencv.hpp>
#include <string>
#include "main/camera/realsense_camera.h"
#include "main/yolo/yolo.h"

static void drawDetections(cv::Mat& img, const std::vector<cv::Rect>& boxes,
                           const std::vector<int>& class_ids,
                           const std::vector<float>& confidences,
                           const std::vector<std::string>& class_names) {
  for (size_t i = 0; i < boxes.size(); i++) {
    cv::Scalar color(0, 255, 0);
    cv::rectangle(img, boxes[i], color, 2);

    std::string label =
        class_names[class_ids[i]] + " " + cv::format("%.2f", confidences[i]);
    int baseline = 0;
    cv::Size label_size =
        cv::getTextSize(label, cv::FONT_HERSHEY_SIMPLEX, 0.5, 1, &baseline);

    cv::rectangle(
        img, cv::Point(boxes[i].x, boxes[i].y - label_size.height - baseline),
        cv::Point(boxes[i].x + label_size.width, boxes[i].y), color,
        cv::FILLED);
    cv::putText(img, label, cv::Point(boxes[i].x, boxes[i].y - baseline),
                cv::FONT_HERSHEY_SIMPLEX, 0.5, cv::Scalar(0, 0, 0), 1);
  }
}

int main() {
  std::filesystem::path modelPath = "/bos/main/yolo/thirdYOLO.engine";
  std::cout << "Importing model from " << modelPath << std::endl;
  std::cout << "File actually exists: " << std::filesystem::exists(modelPath)
            << std::endl;
  yolo::Yolo model(modelPath, true);
  camera::RealSenseCamera rs_camera;
  cv::Mat mat;
  rs_camera.getFrame(mat);
  if (mat.empty()) {
    std::cout << "Couldn't fetch frame properly" << std::endl;
    return 1;
  }
  const std::vector<float> maybe_softmax_results = model.RunModel(mat);
  std::vector<cv::Rect> bboxes(6);
  std::vector<float> confidences(6);
  std::vector<int> class_ids(6);
  for (int i = 0; i < 6; i++) {
    float c_x = maybe_softmax_results[i * 6];
    float c_y = maybe_softmax_results[i * 6 + 1];
    float w = maybe_softmax_results[i * 6 + 2];
    float h = maybe_softmax_results[i * 6 + 3];
    float confidence = maybe_softmax_results[i * 6 + 4];
    float id = maybe_softmax_results[i * 6 + 5];
    bboxes[i] = cv::Rect(c_x - w / 2, c_y - h / 2, w, h);
    confidences[i] = confidence;
    class_ids[i] = id;
  }
  std::vector<std::string> class_names = {"ALGAE", "CORAl"};
  drawDetections(mat, bboxes, class_ids, confidences, class_names);
  cv::imshow("Test detections", mat);
  cv::waitKey(0);
}
